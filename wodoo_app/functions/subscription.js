const functions = require('firebase-functions');
const admin = require('firebase-admin');

// Otomatik abonelik yenileme kontrol√º (g√ºnl√ºk √ßalƒ±≈üƒ±r)
exports.checkSubscriptionRenewals = functions.pubsub
  .schedule('0 9 * * *') // Her g√ºn saat 09:00'da √ßalƒ±≈üƒ±r
  .timeZone('Europe/Istanbul')
  .onRun(async (context) => {
    try {
      console.log('Abonelik yenileme kontrol√º ba≈ülatƒ±ldƒ±');
      
      const db = admin.firestore();
      const now = new Date();
      const threeDaysFromNow = new Date(now.getTime() + (3 * 24 * 60 * 60 * 1000)); // 3 g√ºn sonra
      
      // 3 g√ºn i√ßinde s√ºresi dolacak abonelikleri bul
      const expiringSubscriptions = await db.collection('users')
        .where('subscription.isActive', '==', true)
        .where('subscription.endDate', '<=', threeDaysFromNow.toISOString())
        .where('subscription.endDate', '>', now.toISOString())
        .get();
      
      console.log(`${expiringSubscriptions.size} abonelik 3 g√ºn i√ßinde s√ºresi dolacak`);
      
      // Her abonelik i√ßin yenileme kontrol√º yap
      for (const userDoc of expiringSubscriptions.docs) {
        const userData = userDoc.data();
        const userId = userDoc.id;
        
        await checkAndRenewSubscription(userId, userData);
      }
      
      // S√ºresi dolmu≈ü abonelikleri pasif hale getir
      await deactivateExpiredSubscriptions();
      
      console.log('Abonelik yenileme kontrol√º tamamlandƒ±');
      
    } catch (error) {
      console.error('Abonelik yenileme kontrol√º hatasƒ±:', error);
    }
  });

// Abonelik yenileme kontrol√º ve i≈ülemi
async function checkAndRenewSubscription(userId, userData) {
  try {
    const subscription = userData.subscription;
    const endDate = new Date(subscription.endDate);
    const now = new Date();
    const daysUntilExpiry = Math.ceil((endDate - now) / (1000 * 60 * 60 * 24));
    
    console.log(`Kullanƒ±cƒ± ${userId} - ${daysUntilExpiry} g√ºn kaldƒ±`);
    
    // 3 g√ºn kala bildirim g√∂nder
    if (daysUntilExpiry === 3) {
      await sendRenewalReminder(userId, subscription.plan, daysUntilExpiry);
    }
    
    // 1 g√ºn kala son bildirim g√∂nder
    if (daysUntilExpiry === 1) {
      await sendFinalRenewalReminder(userId, subscription.plan);
    }
    
    // Otomatik yenileme aktifse ve kredi kartƒ± bilgisi varsa yenile
    if (userData.autoRenewal && userData.paymentMethod) {
      if (daysUntilExpiry <= 1) {
        await attemptAutoRenewal(userId, userData);
      }
    }
    
  } catch (error) {
    console.error(`Abonelik yenileme kontrol√º hatasƒ± - Kullanƒ±cƒ± ${userId}:`, error);
  }
}

// S√ºresi dolmu≈ü abonelikleri pasif hale getir
async function deactivateExpiredSubscriptions() {
  try {
    const db = admin.firestore();
    const now = new Date();
    
    const expiredSubscriptions = await db.collection('users')
      .where('subscription.isActive', '==', true)
      .where('subscription.endDate', '<=', now.toISOString())
      .get();
    
    console.log(`${expiredSubscriptions.size} abonelik s√ºresi dolmu≈ü`);
    
    const batch = db.batch();
    
    for (const userDoc of expiredSubscriptions.docs) {
      const userId = userDoc.id;
      
      // Aboneliƒüi pasif hale getir
      batch.update(userDoc.ref, {
        'subscription.isActive': false,
        'subscription.expiredAt': now.toISOString(),
        'subscription.status': 'expired'
      });
      
      // S√ºresi dolma bildirimi g√∂nder
      await sendSubscriptionExpiredNotification(userId);
    }
    
    if (expiredSubscriptions.size > 0) {
      await batch.commit();
      console.log(`${expiredSubscriptions.size} abonelik pasif hale getirildi`);
    }
    
  } catch (error) {
    console.error('S√ºresi dolmu≈ü abonelik i≈üleme hatasƒ±:', error);
  }
}

// Otomatik yenileme denemesi
async function attemptAutoRenewal(userId, userData) {
  try {
    console.log(`Otomatik yenileme denemesi - Kullanƒ±cƒ± ${userId}`);
    
    const subscription = userData.subscription;
    const paymentMethod = userData.paymentMethod;
    
    // √ñdeme tutarƒ±nƒ± hesapla
    const amount = getSubscriptionAmount(subscription.plan);
    
    // √ñdeme i≈ülemini sim√ºle et (ger√ßek uygulamada ƒ∞yizico API'si kullanƒ±lacak)
    const paymentResult = await processPayment({
      userId,
      amount,
      paymentMethod,
      subscriptionPlan: subscription.plan
    });
    
    if (paymentResult.success) {
      // Aboneliƒüi yenile
      await renewSubscription(userId, subscription.plan, paymentResult.paymentId);
      
      // Ba≈üarƒ±lƒ± yenileme bildirimi g√∂nder
      await sendAutoRenewalSuccessNotification(userId, subscription.plan);
      
      console.log(`Otomatik yenileme ba≈üarƒ±lƒ± - Kullanƒ±cƒ± ${userId}`);
    } else {
      // Ba≈üarƒ±sƒ±z yenileme bildirimi g√∂nder
      await sendAutoRenewalFailedNotification(userId, paymentResult.error);
      
      console.log(`Otomatik yenileme ba≈üarƒ±sƒ±z - Kullanƒ±cƒ± ${userId}: ${paymentResult.error}`);
    }
    
  } catch (error) {
    console.error(`Otomatik yenileme hatasƒ± - Kullanƒ±cƒ± ${userId}:`, error);
    await sendAutoRenewalFailedNotification(userId, error.message);
  }
}

// √ñdeme i≈ülemi sim√ºlasyonu
async function processPayment({ userId, amount, paymentMethod, subscriptionPlan }) {
  // Ger√ßek uygulamada ƒ∞yizico API'si kullanƒ±lacak
  // ≈ûimdilik mock √∂deme i≈ülemi
  
  return new Promise((resolve) => {
    setTimeout(() => {
      // %90 ba≈üarƒ± oranƒ± ile sim√ºle et
      const isSuccess = Math.random() > 0.1;
      
      if (isSuccess) {
        resolve({
          success: true,
          paymentId: `payment_${Date.now()}_${userId}`,
          transactionId: `txn_${Date.now()}`
        });
      } else {
        resolve({
          success: false,
          error: 'Kart bilgileri ge√ßersiz veya yetersiz bakiye'
        });
      }
    }, 2000);
  });
}

// Abonelik yenileme
async function renewSubscription(userId, plan, paymentId) {
  const db = admin.firestore();
  const userRef = db.collection('users').doc(userId);
  
  const startDate = new Date();
  let endDate = new Date();
  
  switch (plan) {
    case 'monthly':
      endDate.setDate(startDate.getDate() + 30);
      break;
    case 'semi_annual':
      endDate.setDate(startDate.getDate() + 180);
      break;
    case 'annual':
      endDate.setDate(startDate.getDate() + 365);
      break;
  }
  
  await userRef.update({
    'subscription.isActive': true,
    'subscription.startDate': startDate.toISOString(),
    'subscription.endDate': endDate.toISOString(),
    'subscription.paymentId': paymentId,
    'subscription.lastPaymentDate': startDate.toISOString(),
    'subscription.status': 'active',
    'subscription.renewedAt': startDate.toISOString()
  });
  
  // √ñdeme ge√ßmi≈üi ekle
  await db.collection('payments').add({
    userId,
    paymentId,
    plan,
    amount: getSubscriptionAmount(plan),
    status: 'completed',
    type: 'auto_renewal',
    createdAt: startDate.toISOString()
  });
}

// Abonelik tutarƒ±nƒ± al
function getSubscriptionAmount(plan) {
  const amounts = {
    'monthly': 829,
    'semi_annual': 4199,
    'annual': 7999
  };
  return amounts[plan] || 829;
}

// Yenileme hatƒ±rlatma bildirimi g√∂nder
async function sendRenewalReminder(userId, plan, daysLeft) {
  try {
    const db = admin.firestore();
    const userDoc = await db.collection('users').doc(userId).get();
    
    if (userDoc.exists) {
      const userData = userDoc.data();
      const fcmToken = userData.fcmToken;
      
      if (fcmToken) {
        const message = {
          token: fcmToken,
          notification: {
            title: '‚è∞ Abonelik Yenileme Hatƒ±rlatmasƒ±',
            body: `${plan} aboneliƒüinizin s√ºresi ${daysLeft} g√ºn sonra dolacak.`,
          },
          data: {
            type: 'renewal_reminder',
            plan: plan,
            daysLeft: daysLeft.toString(),
          },
        };

        await admin.messaging().send(message);
        console.log(`Yenileme hatƒ±rlatmasƒ± g√∂nderildi: ${userId}`);
      }
    }
  } catch (error) {
    console.error('Yenileme hatƒ±rlatmasƒ± g√∂nderme hatasƒ±:', error);
  }
}

// Son yenileme hatƒ±rlatmasƒ± g√∂nder
async function sendFinalRenewalReminder(userId, plan) {
  try {
    const db = admin.firestore();
    const userDoc = await db.collection('users').doc(userId).get();
    
    if (userDoc.exists) {
      const userData = userDoc.data();
      const fcmToken = userData.fcmToken;
      
      if (fcmToken) {
        const message = {
          token: fcmToken,
          notification: {
            title: 'üö® Son G√ºn!',
            body: `${plan} aboneliƒüinizin s√ºresi yarƒ±n dolacak. Hemen yenileyin!`,
          },
          data: {
            type: 'final_renewal_reminder',
            plan: plan,
          },
        };

        await admin.messaging().send(message);
        console.log(`Son yenileme hatƒ±rlatmasƒ± g√∂nderildi: ${userId}`);
      }
    }
  } catch (error) {
    console.error('Son yenileme hatƒ±rlatmasƒ± g√∂nderme hatasƒ±:', error);
  }
}

// Abonelik s√ºresi dolma bildirimi g√∂nder
async function sendSubscriptionExpiredNotification(userId) {
  try {
    const db = admin.firestore();
    const userDoc = await db.collection('users').doc(userId).get();
    
    if (userDoc.exists) {
      const userData = userDoc.data();
      const fcmToken = userData.fcmToken;
      
      if (fcmToken) {
        const message = {
          token: fcmToken,
          notification: {
            title: '‚ùå Abonelik S√ºresi Doldu',
            body: 'Premium √∂zellikler i√ßin aboneliƒüinizi yenileyin.',
          },
          data: {
            type: 'subscription_expired',
          },
        };

        await admin.messaging().send(message);
        console.log(`Abonelik s√ºresi dolma bildirimi g√∂nderildi: ${userId}`);
      }
    }
  } catch (error) {
    console.error('Abonelik s√ºresi dolma bildirimi g√∂nderme hatasƒ±:', error);
  }
}

// Otomatik yenileme ba≈üarƒ± bildirimi g√∂nder
async function sendAutoRenewalSuccessNotification(userId, plan) {
  try {
    const db = admin.firestore();
    const userDoc = await db.collection('users').doc(userId).get();
    
    if (userDoc.exists) {
      const userData = userDoc.data();
      const fcmToken = userData.fcmToken;
      
      if (fcmToken) {
        const message = {
          token: fcmToken,
          notification: {
            title: '‚úÖ Abonelik Otomatik Yenilendi',
            body: `${plan} aboneliƒüiniz ba≈üarƒ±yla yenilendi.`,
          },
          data: {
            type: 'auto_renewal_success',
            plan: plan,
          },
        };

        await admin.messaging().send(message);
        console.log(`Otomatik yenileme ba≈üarƒ± bildirimi g√∂nderildi: ${userId}`);
      }
    }
  } catch (error) {
    console.error('Otomatik yenileme ba≈üarƒ± bildirimi g√∂nderme hatasƒ±:', error);
  }
}

// Otomatik yenileme ba≈üarƒ±sƒ±z bildirimi g√∂nder
async function sendAutoRenewalFailedNotification(userId, error) {
  try {
    const db = admin.firestore();
    const userDoc = await db.collection('users').doc(userId).get();
    
    if (userDoc.exists) {
      const userData = userDoc.data();
      const fcmToken = userData.fcmToken;
      
      if (fcmToken) {
        const message = {
          token: fcmToken,
          notification: {
            title: '‚ùå Otomatik Yenileme Ba≈üarƒ±sƒ±z',
            body: 'Aboneliƒüiniz otomatik olarak yenilenemedi. L√ºtfen manuel olarak yenileyin.',
          },
          data: {
            type: 'auto_renewal_failed',
            error: error,
          },
        };

        await admin.messaging().send(message);
        console.log(`Otomatik yenileme ba≈üarƒ±sƒ±z bildirimi g√∂nderildi: ${userId}`);
      }
    }
  } catch (error) {
    console.error('Otomatik yenileme ba≈üarƒ±sƒ±z bildirimi g√∂nderme hatasƒ±:', error);
  }
}

// Manuel abonelik yenileme
exports.manualRenewal = functions.https.onCall(async (data, context) => {
  try {
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', 'Kullanƒ±cƒ± giri≈ü yapmamƒ±≈ü');
    }

    const userId = context.auth.uid;
    const { plan } = data;

    // Kullanƒ±cƒ± bilgilerini al
    const userDoc = await admin.firestore().collection('users').doc(userId).get();
    if (!userDoc.exists) {
      throw new functions.https.HttpsError('not-found', 'Kullanƒ±cƒ± bulunamadƒ±');
    }

    const userData = userDoc.data();

    // √ñdeme i≈ülemi
    const amount = getSubscriptionAmount(plan);
    const paymentResult = await processPayment({
      userId,
      amount,
      paymentMethod: userData.paymentMethod,
      subscriptionPlan: plan
    });

    if (paymentResult.success) {
      // Aboneliƒüi yenile
      await renewSubscription(userId, plan, paymentResult.paymentId);

      return {
        success: true,
        message: 'Abonelik ba≈üarƒ±yla yenilendi',
        paymentId: paymentResult.paymentId
      };
    } else {
      throw new functions.https.HttpsError('payment-failed', paymentResult.error);
    }

  } catch (error) {
    console.error('Manuel yenileme hatasƒ±:', error);
    throw new functions.https.HttpsError('internal', error.message);
  }
});

// Otomatik yenileme ayarlarƒ±nƒ± g√ºncelle
exports.updateAutoRenewalSettings = functions.https.onCall(async (data, context) => {
  try {
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', 'Kullanƒ±cƒ± giri≈ü yapmamƒ±≈ü');
    }

    const userId = context.auth.uid;
    const { autoRenewal, paymentMethod } = data;

    await admin.firestore().collection('users').doc(userId).update({
      autoRenewal: autoRenewal,
      paymentMethod: paymentMethod,
      autoRenewalUpdatedAt: new Date().toISOString()
    });

    return {
      success: true,
      message: 'Otomatik yenileme ayarlarƒ± g√ºncellendi'
    };

  } catch (error) {
    console.error('Otomatik yenileme ayarlarƒ± g√ºncelleme hatasƒ±:', error);
    throw new functions.https.HttpsError('internal', error.message);
  }
});
